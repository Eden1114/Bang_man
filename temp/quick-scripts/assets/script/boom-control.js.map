{"version":3,"sources":["boom-control.js"],"names":["cc","Class","extends","Component","properties","_dropTimeStamp","restDuration","_booming","_powerHandler","get","node","getChildByName","boomDuration","power","_state","_boomMap","_gridControl","init","require","on","onTimeStampSync","children","item","scaleX","Date","now","active","scheduleOnce","bind","e","currentTimeStamp","innerTimeStamp","detail","emit","boom","unsetBoom","getGrid","position","removeFromParent","update"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,wBAAgB,IADR;AAERC,sBAAc,CAFN;AAGRC,kBAAU,KAHF;AAIRC,uBAAe;AACXC,iBAAK,eAAY;AACb,uBAAO,KAAKC,IAAL,CAAUC,cAAV,CAAyB,eAAzB,CAAP;AACH;AAHU,SAJP;AASRC,sBAAc,GATN;AAURC,eAAO,CAVC;AAWR;AACA;AACAC,gBAAQ,IAbA;AAcRC,kBAAU,IAdF;AAeRC,sBAAc;AAfN,KAHP;;AAqBL;AACAC,UAAM,gBAAY;AACd,aAAKF,QAAL,GAAgBG,QAAQ,UAAR,CAAhB;AACA,aAAKF,YAAL,GAAoBE,QAAQ,cAAR,CAApB;AACA,aAAKR,IAAL,CAAUS,EAAV,CAAa,iBAAb,EAAgC,KAAKC,eAArC,EAAsD,IAAtD;;AAEA;AALc;AAAA;AAAA;;AAAA;AAMd,iCAAiB,KAAKZ,aAAL,CAAmBa,QAApC,8HAA8C;AAAA,oBAArCC,IAAqC;;AAC1CA,qBAAKC,MAAL,GAAc,KAAKV,KAAL,GAAa,GAA3B;AACH;;AAED;AAVc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWd,aAAKR,cAAL,GAAsBmB,KAAKC,GAAL,EAAtB;AACA;AACA,aAAKX,MAAL,GAAc,YAAd;AACA;AACA,aAAKN,aAAL,CAAmBkB,MAAnB,GAA4B,IAA5B;AACA,aAAKC,YAAL,CAAkB,YAAY;AAC1B;AACA,iBAAKnB,aAAL,CAAmBkB,MAAnB,GAA4B,KAA5B;AACA,iBAAKC,YAAL,CAAkB,YAAY;AAC1B;AACA,qBAAKb,MAAL,GAAc,iBAAd;AACA;AACA,qBAAKN,aAAL,CAAmBkB,MAAnB,GAA4B,IAA5B;AACH,aALiB,CAKhBE,IALgB,CAKX,IALW,CAAlB,EAKc,CALd;AAMH,SATiB,CAShBA,IATgB,CASX,IATW,CAAlB,EASc,CATd;AAUH,KAhDI;;AAkDLR,qBAAiB,yBAAUS,CAAV,EAAa;AAC1B,YAAIC,mBAAmB,KAAKzB,cAA5B;AACA,YAAI0B,iBAAiBF,EAAEG,MAAvB;AACA,YAAID,iBAAiBD,gBAArB,EAAuC;AACnC,iBAAKzB,cAAL,GAAsB0B,cAAtB;AACA,iBAAKrB,IAAL,CAAUuB,IAAV,CAAe,iBAAf,EAAkCF,cAAlC;AACH;AAEJ,KA1DI;;AA4DLG,UAAM,gBAAY;AACd;AACA,aAAKpB,MAAL,GAAc,SAAd;AACA,aAAKJ,IAAL,CAAUuB,IAAV,CAAe,MAAf;AACA,aAAKN,YAAL,CAAkB,YAAY;AAC1B;AACA,iBAAKZ,QAAL,CAAcoB,SAAd,CAAwB,KAAKnB,YAAL,CAAkBoB,OAAlB,CAA0B,KAAK1B,IAAL,CAAU2B,QAApC,CAAxB;AACA,iBAAK3B,IAAL,CAAU4B,gBAAV;AACH,SAJiB,CAIhBV,IAJgB,CAIX,IAJW,CAAlB,EAIc,KAAKhB,YAJnB;AAKH,KArEI;;AAuEL2B,YAAQ,kBAAY;AAChB;AACA,YAAK,KAAKlC,cAAL,GAAsB,KAAKC,YAAL,GAAoB,IAA3C,IAAoDkB,KAAKC,GAAL,EAAxD,EAAoE;AAChE;AACA,gBAAI,CAAC,KAAKlB,QAAV,EAAoB;AAChB,qBAAKA,QAAL,GAAgB,IAAhB;AACA,qBAAK2B,IAAL;AACH;AACJ;AACJ;AAhFI,CAAT","file":"boom-control.js","sourceRoot":"..\\..\\..\\..\\assets\\script","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        _dropTimeStamp: null,\r\n        restDuration: 3,\r\n        _booming: false,\r\n        _powerHandler: {\r\n            get: function () {\r\n                return this.node.getChildByName('power-handler');\r\n            }\r\n        },\r\n        boomDuration: 0.2,\r\n        power: 3,\r\n        //power-init state\r\n        //time-stamp-init state\r\n        _state: null,\r\n        _boomMap: null,\r\n        _gridControl: null,\r\n    },\r\n\r\n    //design the way to get the grid position of player\r\n    init: function () {\r\n        this._boomMap = require('boom-map');\r\n        this._gridControl = require('grid-control');\r\n        this.node.on('time-stamp-sync', this.onTimeStampSync, this);\r\n\r\n        //初始化威力scale\r\n        for (let item of this._powerHandler.children) {\r\n            item.scaleX = this.power + 0.4;\r\n        }\r\n\r\n        //炮弹被放下后 会马上记录当前的时间戳\r\n        this._dropTimeStamp = Date.now();\r\n        //炮弹距离初始化状态\r\n        this._state = 'power-init';\r\n        //开启碰撞检测 修正炮弹威力\r\n        this._powerHandler.active = true;\r\n        this.scheduleOnce(function () {\r\n            //重置碰撞\r\n            this._powerHandler.active = false;\r\n            this.scheduleOnce(function () {\r\n                //炮弹时间初始化状态\r\n                this._state = 'time-stamp-init';\r\n                //[error]重新开启碰撞 同步炮弹爆炸时间\r\n                this._powerHandler.active = true;\r\n            }.bind(this), 0)\r\n        }.bind(this), 0);\r\n    },\r\n\r\n    onTimeStampSync: function (e) {\r\n        let currentTimeStamp = this._dropTimeStamp;\r\n        let innerTimeStamp = e.detail;\r\n        if (innerTimeStamp < currentTimeStamp) {\r\n            this._dropTimeStamp = innerTimeStamp;\r\n            this.node.emit('time-stamp-sync', innerTimeStamp);\r\n        }\r\n\r\n    },\r\n\r\n    boom: function () {\r\n        //渲染炮弹威力\r\n        this._state = 'booming';\r\n        this.node.emit('boom');\r\n        this.scheduleOnce(function () {\r\n            //指定时间后 炮弹自动销毁↓\r\n            this._boomMap.unsetBoom(this._gridControl.getGrid(this.node.position));\r\n            this.node.removeFromParent();\r\n        }.bind(this), this.boomDuration);\r\n    },\r\n\r\n    update: function () {\r\n        //  然后在update判断是否到达了要爆炸的时间\r\n        if ((this._dropTimeStamp + this.restDuration * 1000) <= Date.now()) {\r\n            //boom\r\n            if (!this._booming) {\r\n                this._booming = true;\r\n                this.boom();\r\n            }\r\n        }\r\n    }\r\n});\r\n"]}