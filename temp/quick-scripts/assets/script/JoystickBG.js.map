{"version":3,"sources":["JoystickBG.js"],"names":["Common","require","cc","Class","extends","Component","properties","dot","default","type","Node","displayName","_joyCom","_playerNode","_angle","_radian","_speed","_speed1","_speed2","_opacity","onLoad","node","parent","getComponent","sprite","touchType","TouchType","DEFAULT","_initTouchEvent","self","on","EventType","TOUCH_START","_touchStartEvent","TOUCH_MOVE","_touchMoveEvent","TOUCH_END","_touchEndEvent","TOUCH_CANCEL","update","dt","directionType","DirectionType","ALL","_allDirectionsMove","x","Math","cos","PI","y","sin","_getDistance","pos1","pos2","sqrt","pow","_getRadian","point","_getAngle","pos","getPosition","atan2","_setSpeed","distance","_radius","event","touchPos","convertToNodeSpaceAR","getLocation","p","radius","width","_stickPos","posX","posY","setPosition"],"mappings":"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","file":"JoystickBG.js","sourceRoot":"..\\..\\..\\..\\assets\\script","sourcesContent":["var Common = require('JoystickCommon');\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        dot: {\r\n            default: null,\r\n            type: cc.Node,\r\n            displayName: '摇杆节点',\r\n        },\r\n\r\n        _joyCom: {\r\n            default: null,\r\n            displayName: 'joy Node',\r\n\r\n        },\r\n        _playerNode: {\r\n            default: null,\r\n            displayName: '被操作的目标Node',\r\n        },\r\n\r\n        _angle: {\r\n            default: null,\r\n            displayName: '当前触摸的角度',\r\n\r\n        },\r\n       \r\n        _radian: {\r\n            default: null,\r\n            displayName: '弧度',\r\n        },      \r\n\r\n\r\n        _speed: 0,          //实际速度\r\n        _speed1: 2,         //一段速度\r\n        _speed2: 4,         //二段速度\r\n        _opacity: 0,        //透明度\r\n    },\r\n\r\n\r\n    onLoad: function()\r\n    {\r\n        // joy下的Game组件\r\n        this._joyCom = this.node.parent.getComponent('Game');\r\n        // game组件下的player节点\r\n        this._playerNode = this._joyCom.sprite;\r\n    \r\n        if(this._joyCom.touchType == Common.TouchType.DEFAULT){\r\n            //对圆圈的触摸监听\r\n            this._initTouchEvent();\r\n        }\r\n    },\r\n\r\n\r\n    //对圆圈的触摸监听\r\n    _initTouchEvent: function()\r\n    {\r\n        var self = this;\r\n\r\n        self.node.on(cc.Node.EventType.TOUCH_START, this._touchStartEvent, self);\r\n\r\n        self.node.on(cc.Node.EventType.TOUCH_MOVE, this._touchMoveEvent, self);\r\n\r\n        // 触摸在圆圈内离开或在圆圈外离开后，摇杆归位，player速度为0\r\n        self.node.on(cc.Node.EventType.TOUCH_END, this._touchEndEvent, self);\r\n        self.node.on(cc.Node.EventType.TOUCH_CANCEL, this._touchEndEvent, self);\r\n    },\r\n\r\n    //更新移动目标\r\n    update: function(dt)\r\n    {\r\n        switch (this._joyCom.directionType)\r\n        {\r\n            case Common.DirectionType.ALL:   \r\n                this._allDirectionsMove();\r\n                break;\r\n            default :\r\n                break;\r\n        }\r\n    },\r\n     //全方向移动\r\n    _allDirectionsMove: function()\r\n    {\r\n        this._playerNode.x += Math.cos(this._angle * (Math.PI/180)) * this._speed;\r\n        this._playerNode.y += Math.sin(this._angle * (Math.PI/180)) * this._speed;\r\n    },\r\n\r\n     //计算两点间的距离并返回\r\n    _getDistance: function(pos1, pos2)\r\n    {\r\n        return Math.sqrt(Math.pow(pos1.x - pos2.x, 2) +\r\n        Math.pow(pos1.y - pos2.y, 2));\r\n    },\r\n\r\n    /*角度/弧度转换\r\n    角度 = 弧度 * 180 / Math.PI\r\n    弧度 = 角度 * Math.PI / 180*/\r\n    //计算弧度并返回\r\n    _getRadian: function(point)\r\n    {\r\n        this._radian = Math.PI / 180 * this._getAngle(point);\r\n        return this._radian;\r\n    },\r\n\r\n    //计算角度并返回\r\n    _getAngle: function(point)\r\n    {\r\n        \r\n        var pos = this.node.getPosition();\r\n        this._angle = Math.atan2(point.y - pos.y, point.x - pos.x) * (180/Math.PI);\r\n        return this._angle;\r\n    },\r\n\r\n     //设置实际速度\r\n    _setSpeed: function(point)\r\n    {\r\n        //触摸点和遥控杆中心的距离\r\n        var distance = this._getDistance(point, this.node.getPosition());\r\n\r\n        //如果半径\r\n        if(distance < this._radius)\r\n        {\r\n            this._speed = this._speed1;\r\n        }\r\n        else\r\n        {\r\n            this._speed = this._speed2;\r\n        }\r\n    },\r\n\r\n    _touchStartEvent: function(event) {\r\n        // 获取触摸位置的世界坐标转换成圆圈的相对坐标（以圆圈的锚点为基准）\r\n        var touchPos = this.node.convertToNodeSpaceAR(event.getLocation());\r\n        //触摸点与圆圈中心的距离\r\n        var distance = this._getDistance(touchPos,cc.p(0,0));\r\n        //圆圈半径\r\n        var radius = this.node.width / 2;\r\n        // 记录摇杆位置，给touch move使用\r\n        this._stickPos = touchPos;\r\n        var posX = this.node.getPosition().x + touchPos.x;\r\n        var posY = this.node.getPosition().y + touchPos.y;\r\n         //手指在圆圈内触摸,控杆跟随触摸点\r\n        if(radius > distance)\r\n        {\r\n            this.dot.setPosition(cc.p(posX, posY));\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n\r\n    _touchMoveEvent: function(event){\r\n        var touchPos = this.node.convertToNodeSpaceAR(event.getLocation());\r\n        var distance = this._getDistance(touchPos,cc.p(0,0));\r\n        var radius = this.node.width / 2;\r\n        // 由于摇杆的postion是以父节点为锚点，所以定位要加上ring和dot当前的位置(stickX,stickY)\r\n        var posX = this.node.getPosition().x + touchPos.x;\r\n        var posY = this.node.getPosition().y + touchPos.y;\r\n        if(radius > distance)\r\n        {\r\n            this.dot.setPosition(cc.p(posX, posY));\r\n        }\r\n        else\r\n        {\r\n            //控杆永远保持在圈内，并在圈内跟随触摸更新角度\r\n            var x = this.node.getPosition().x + Math.cos(this._getRadian(cc.p(posX,posY))) * radius;\r\n            var y = this.node.getPosition().y + Math.sin(this._getRadian(cc.p(posX,posY))) * radius;\r\n            this.dot.setPosition(cc.p(x, y));\r\n        }\r\n        //更新角度\r\n        this._getAngle(cc.p(posX,posY));\r\n        //设置实际速度\r\n        this._setSpeed(cc.p(posX,posY));\r\n\r\n    },\r\n\r\n    _touchEndEvent: function(){\r\n        this.dot.setPosition(this.node.getPosition());\r\n        this._speed = 0;\r\n    },\r\n});\r\n"]}