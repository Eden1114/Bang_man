{"version":3,"sources":["JoystickBG.js"],"names":["Common","require","cc","Class","extends","Component","properties","dot","default","type","Node","displayName","_joyCom","_playerNode","_angle","_radian","_speed","_speed1","_speed2","_opacity","_touchEnd","onLoad","node","parent","getComponent","sprite","touchType","TouchType","DEFAULT","_initTouchEvent","self","on","EventType","TOUCH_START","_touchStartEvent","TOUCH_MOVE","_touchMoveEvent","TOUCH_END","_touchEndEvent","TOUCH_CANCEL","update","dt","directionType","DirectionType","ALL","_directionsMove","player","move_control","speed","angle","touchEnd","onDirectionMove","_getDistance","pos1","pos2","Math","sqrt","pow","x","y","_getRadian","point","PI","_getAngle","pos","getPosition","atan2","_setSpeed","distance","_radius","event","touchPos","convertToNodeSpaceAR","getLocation","p","radius","width","_stickPos","posX","posY","setPosition","cos","sin"],"mappings":"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","file":"JoystickBG.js","sourceRoot":"..\\..\\..\\..\\assets\\script","sourcesContent":["var Common = require('JoystickCommon');\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        dot: {\r\n            default: null,\r\n            type: cc.Node,\r\n            displayName: '摇杆节点',\r\n        },\r\n\r\n        _joyCom: {\r\n            default: null,\r\n            displayName: 'joy Node',\r\n        },\r\n\r\n        _playerNode: {\r\n            default: null,\r\n            displayName: '被操作的目标Node',\r\n        },\r\n\r\n        _angle: {\r\n            default: null,\r\n            displayName: '当前触摸的角度',\r\n        },\r\n\r\n        _radian: {\r\n            default: null,\r\n            displayName: '弧度',\r\n        },\r\n\r\n\r\n        _speed: 0,          //实际速度\r\n        _speed1: 3,         //一段速度\r\n        _speed2: 5,         //二段速度\r\n        _opacity: 128,        //透明度\r\n        _touchEnd:false\r\n    },\r\n\r\n\r\n    onLoad: function () {\r\n\r\n        // joy下的Game组件\r\n        this._joyCom = this.node.parent.getComponent('Game');\r\n        \r\n        // game组件下的player节点\r\n        this._playerNode = this._joyCom.sprite;\r\n\r\n        if (this._joyCom.touchType == Common.TouchType.DEFAULT) {\r\n            //对圆圈的触摸添加监听事件\r\n            this._initTouchEvent();\r\n        }\r\n    },\r\n\r\n\r\n    //对圆圈的触摸监听\r\n    _initTouchEvent: function () {\r\n        let self = this;\r\n\r\n        self.node.on(cc.Node.EventType.TOUCH_START, this._touchStartEvent, self);\r\n        self.node.on(cc.Node.EventType.TOUCH_MOVE , this._touchMoveEvent , self);\r\n\r\n        // 触摸在圆圈内离开或在圆圈外离开后，摇杆归位，player速度为0\r\n        self.node.on(cc.Node.EventType.TOUCH_END, this._touchEndEvent, self);\r\n        self.node.on(cc.Node.EventType.TOUCH_CANCEL, this._touchEndEvent, self);\r\n\r\n    },\r\n\r\n    //更新移动目标\r\n    update: function (dt) {\r\n        switch (this._joyCom.directionType) {\r\n            case Common.DirectionType.ALL:\r\n                this._directionsMove();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * onKeyDown: function (e) {\r\n        //在按下的时候设置方向标志位\r\n        switch (e.keyCode) {\r\n            case cc.KEY.up: { this._up = true; break }\r\n            case cc.KEY.down: { this._down = true; break }\r\n            case cc.KEY.left: { this._left = true; this.node.scaleX = -1; this.node.children[0].scaleX = -1; break }\r\n            case cc.KEY.right: { this._right = true; this.node.scaleX = 1; this.node.children[0].scaleX = 1; break }\r\n        }\r\n    },\r\n\r\n    onKeyUp: function (e) {\r\n        //在弹起的时候解除方向标志位\r\n        switch (e.keyCode) {\r\n            case cc.KEY.up: { this._up = false; break }\r\n            case cc.KEY.down: { this._down = false; break }\r\n            case cc.KEY.left: { this._left = false; break }\r\n            case cc.KEY.right: { this._right = false; break }\r\n        }\r\n    },\r\n     * \r\n     * \r\n     */\r\n\r\n    \r\n    //全方向移动\r\n    //监听事件\r\n    _directionsMove: function () {\r\n        let player = this._playerNode;\r\n        let move_control = player.getComponent('move-control');\r\n\r\n        // let dx = Math.cos(this._angle * (Math.PI / 180)) * this._speed;\r\n        // let dy = Math.sin(this._angle * (Math.PI / 180)) * this._speed;\r\n        let speed = this._speed;\r\n        let angle = this._angle;\r\n        let touchEnd = this._touchEnd;\r\n        move_control.onDirectionMove(touchEnd, speed, angle);\r\n    },\r\n\r\n    //计算两点间的距离并返回\r\n    _getDistance: function (pos1, pos2) {\r\n        return Math.sqrt(Math.pow(pos1.x - pos2.x, 2) +\r\n            Math.pow(pos1.y - pos2.y, 2));\r\n    },\r\n\r\n    /*角度/弧度转换\r\n    角度 = 弧度 * 180 / Math.PI\r\n    弧度 = 角度 * Math.PI / 180*/\r\n    //计算弧度并返回\r\n    _getRadian: function (point) {\r\n        this._radian = Math.PI / 180 * this._getAngle(point);\r\n        return this._radian;\r\n    },\r\n\r\n    //计算角度并返回\r\n    _getAngle: function (point) {\r\n        var pos = this.node.getPosition();\r\n        this._angle = Math.atan2(point.y - pos.y, point.x - pos.x) * (180 / Math.PI);\r\n        return this._angle;\r\n    },\r\n\r\n    //设置实际速度\r\n    _setSpeed: function (point) {\r\n        //触摸点和遥控杆中心的距离\r\n        var distance = this._getDistance(point, this.node.getPosition());\r\n\r\n        //如果半径小于radius，为一段速度，否则为二段速度\r\n        if (distance < this._radius) {\r\n            this._speed = this._speed1;\r\n        }\r\n        else {\r\n            this._speed = this._speed2;\r\n        }\r\n    },\r\n\r\n    //开始触摸到屏幕\r\n    _touchStartEvent: function (event) {\r\n        this._touchEnd = false;\r\n        // 获取触摸位置的世界坐标转换成圆圈的相对坐标（以圆圈的锚点为基准）\r\n        var touchPos = this.node.convertToNodeSpaceAR(event.getLocation());\r\n        //触摸点与圆圈中心的距离\r\n        var distance = this._getDistance(touchPos, cc.p(0, 0));\r\n        //圆圈半径\r\n        var radius = this.node.width / 2;\r\n        // 记录摇杆位置，给touch move使用\r\n        this._stickPos = touchPos;\r\n        var posX = this.node.getPosition().x + touchPos.x;\r\n        var posY = this.node.getPosition().y + touchPos.y;\r\n        //手指在圆圈内触摸,控杆跟随触摸点\r\n        if (radius > distance) {\r\n            this.dot.setPosition(cc.p(posX, posY));\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n\r\n    //跟随移动\r\n    _touchMoveEvent: function (event) {\r\n        this._touchEnd = false;\r\n        var touchPos = this.node.convertToNodeSpaceAR(event.getLocation());\r\n        var distance = this._getDistance(touchPos, cc.p(0, 0));\r\n        var radius = this.node.width / 2;\r\n        // 由于摇杆的postion是以父节点为锚点，所以定位要加上ring和dot当前的位置(stickX,stickY)\r\n        var posX = this.node.getPosition().x + touchPos.x;\r\n        var posY = this.node.getPosition().y + touchPos.y;\r\n        if (radius > distance) {\r\n            this.dot.setPosition(cc.p(posX, posY));\r\n        }\r\n        else {\r\n            //控杆永远保持在圈内，并在圈内跟随触摸更新角度\r\n            var x = this.node.getPosition().x + Math.cos(this._getRadian(cc.p(posX, posY))) * radius;\r\n            var y = this.node.getPosition().y + Math.sin(this._getRadian(cc.p(posX, posY))) * radius;\r\n            this.dot.setPosition(cc.p(x, y));\r\n        }\r\n        //更新角度\r\n        this._getAngle(cc.p(posX, posY));\r\n        //设置实际速度\r\n        this._setSpeed(cc.p(posX, posY));\r\n\r\n    },\r\n\r\n    //触摸结束\r\n    _touchEndEvent: function () {\r\n        this.dot.setPosition(this.node.getPosition());\r\n        this._speed = 0;\r\n        this._touchEnd = true;\r\n        // let player = this._playerNode;\r\n        // let move_control = player.getComponent('move-control');\r\n\r\n        // // let dx = Math.cos(this._angle * (Math.PI / 180)) * this._speed;\r\n        // // let dy = Math.sin(this._angle * (Math.PI / 180)) * this._speed;\r\n        // let speed = this._speed;\r\n        // let angle = this._angle;\r\n\r\n        // move_control.onDirectionMove(true, speed, angle);\r\n    },\r\n});\r\n"]}