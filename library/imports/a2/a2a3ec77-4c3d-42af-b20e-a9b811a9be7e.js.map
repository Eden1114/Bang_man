{"version":3,"sources":["..\\..\\..\\..\\assets\\script/assets\\script\\player-control.js"],"names":["cc","Class","extends","Component","properties","hp","realPlayer","hurtValue","_hpLabel","get","node","getChildByName","getComponent","Label","_sceneLoading","hurtDurationOfEnemyTouch","_hurtTimeStamp","_enemyRemoving","_gridControl","onLoad","require","Date","now","string","on","onHurt","manager","director","getCollisionManager","enabled","enabledDebugDraw","enabledDrawBoundingBox","onCollisionStay","other","self","group","checkGridTouch","otherNode","selfNode","otherGrid","getGrid","position","selfGrid","x","y","loadScene","window","enemyNum","removeFromParent"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,YAAI,GADI,EACI;AACZC,oBAAY,KAFJ;AAGRC,mBAAW,CAHH,EAGQ;AAChBC,kBAAU;AACNC,iBAAK,eAAY;AACb,uBAAO,KAAKC,IAAL,CAAUC,cAAV,CAAyB,SAAzB,EAAoCC,YAApC,CAAiDZ,GAAGa,KAApD,CAAP;AACH;AAHK,SAJF,EAQJ;AACJC,uBAAe,KATP;AAURC,kCAA0B,GAVlB,EAUwB;AAChCC,wBAAgB,IAXR;AAYRC,wBAAgB,KAZR;AAaRC,sBAAc;AAbN,KAHP;;AAmBLC,YAAQ,kBAAY;;AAEhB,aAAKD,YAAL,GAAoBE,QAAQ,cAAR,CAApB;AACA,aAAKJ,cAAL,GAAsBK,KAAKC,GAAL,EAAtB;;AAEA,aAAKd,QAAL,CAAce,MAAd,GAAuB,KAAKlB,EAA5B,CALgB,CAKgB;AAChC,aAAKK,IAAL,CAAUc,EAAV,CAAa,eAAb,EAA8B,KAAKC,MAAnC,EAA2C,IAA3C,EANgB,CAMoC;;AAEpD;AACA,YAAIC,UAAU1B,GAAG2B,QAAH,CAAYC,mBAAZ,EAAd;AACAF,gBAAQG,OAAR,GAAkB,IAAlB;AACA;AACAH,gBAAQI,gBAAR,GAA2B,IAA3B;AACAJ,gBAAQK,sBAAR,GAAiC,IAAjC;AACH,KAjCI;;AAmCL;;;;;AAKAC,qBAAiB,yBAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AACpC,YAAI,KAAK5B,UAAL,IAAmB2B,MAAMvB,IAAN,CAAWyB,KAAX,IAAoB,QAA3C,EAAqD;AACjD;AACA,gBAAI,KAAKC,cAAL,CAAoBH,MAAMvB,IAA1B,EAAgCwB,KAAKxB,IAArC,CAAJ,EAAgD;AAC5C,oBAAI,KAAKM,cAAL,GAAsB,KAAKD,wBAAL,GAAgC,IAAtD,IAA8DM,KAAKC,GAAL,EAAlE,EAA8E;AAC1E,yBAAKG,MAAL;AACA,yBAAKT,cAAL,GAAsBK,KAAKC,GAAL,EAAtB;AACH;AACJ;AACJ;AACJ,KAlDI;;AAoDL;AACAc,oBAAgB,wBAAUC,SAAV,EAAqBC,QAArB,EAA+B;AAC3C,YAAIC,YAAY,KAAKrB,YAAL,CAAkBsB,OAAlB,CAA0BH,UAAUI,QAApC,CAAhB;AACA,YAAIC,WAAW,KAAKxB,YAAL,CAAkBsB,OAAlB,CAA0BF,SAASG,QAAnC,CAAf;;AAEA,YAAIF,UAAUI,CAAV,IAAeD,SAASC,CAAxB,IAA6BJ,UAAUK,CAAV,IAAeF,SAASE,CAAzD,EAA4D;AACxD,mBAAO,IAAP;AACH,SAFD,MAEO;AACH,mBAAO,KAAP;AACH;AACJ,KA9DI;;AAiEL;AACAnB,YAAQ,kBAAY;AAChB,aAAKpB,EAAL,IAAW,KAAKE,SAAhB;AACA,YAAI,KAAKF,EAAL,IAAW,CAAf,EAAkB;AACd,gBAAI,KAAKC,UAAT,EAAqB;AACjB;AACA,oBAAI,CAAC,KAAKQ,aAAV,EAAyB;AACrB,yBAAKA,aAAL,GAAqB,IAArB;AACAd,uBAAG2B,QAAH,CAAYkB,SAAZ,CAAsB,iBAAtB;AACH;AACJ,aAND,MAMO;AACH;AACA,oBAAI,CAAC,KAAK5B,cAAV,EAA0B;AACtB,yBAAKA,cAAL,GAAsB,IAAtB;AACA6B,2BAAOC,QAAP;AACA,yBAAKrC,IAAL,CAAUsC,gBAAV;AACH;AACJ;AACJ,SAfD,MAeO;AACH,iBAAKxC,QAAL,CAAce,MAAd,GAAuB,KAAKlB,EAA5B;AACH;AAEJ;;AAvFI,CAAT","file":"player-control.js","sourceRoot":"..\\..\\..\\..\\assets\\script","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        hp: 100,    //当前剩余的血量\r\n        realPlayer: false,\r\n        hurtValue: 5,   //受伤害时，扣除的hp量\r\n        _hpLabel: {\r\n            get: function () {\r\n                return this.node.getChildByName('hp-tips').getComponent(cc.Label);\r\n            }\r\n        },  //用于放置血量的label\r\n        _sceneLoading: false,\r\n        hurtDurationOfEnemyTouch: 0.5,  //just use in enemy\r\n        _hurtTimeStamp: null,\r\n        _enemyRemoving: false,\r\n        _gridControl: null,\r\n    },\r\n\r\n    onLoad: function () {\r\n\r\n        this._gridControl = require('grid-control');\r\n        this._hurtTimeStamp = Date.now();\r\n\r\n        this._hpLabel.string = this.hp; //设置hp\r\n        this.node.on('hurt-by-power', this.onHurt, this);   //收到伤害时执行的函数\r\n\r\n        //获取碰撞检测系统\r\n        let manager = cc.director.getCollisionManager();\r\n        manager.enabled = true;\r\n        //FOR DEGUB\r\n        manager.enabledDebugDraw = true;\r\n        manager.enabledDrawBoundingBox = true;\r\n    },\r\n\r\n    /**\r\n     * 当碰撞保持的时候调用\r\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\r\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\r\n     */\r\n    onCollisionStay: function (other, self) {\r\n        if (this.realPlayer && other.node.group == 'player') {\r\n            //[add] check the grid\r\n            if (this.checkGridTouch(other.node, self.node)) {\r\n                if (this._hurtTimeStamp + this.hurtDurationOfEnemyTouch * 1000 <= Date.now()) {\r\n                    this.onHurt();\r\n                    this._hurtTimeStamp = Date.now();\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    //判断两个spirte是否在一个格子内\r\n    checkGridTouch: function (otherNode, selfNode) {\r\n        let otherGrid = this._gridControl.getGrid(otherNode.position);\r\n        let selfGrid = this._gridControl.getGrid(selfNode.position);\r\n\r\n        if (otherGrid.x == selfGrid.x && otherGrid.y == selfGrid.y) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n\r\n\r\n    // 受到伤害时\r\n    onHurt: function () {\r\n        this.hp -= this.hurtValue;\r\n        if (this.hp <= 0) {\r\n            if (this.realPlayer) {\r\n                //game over\r\n                if (!this._sceneLoading) {\r\n                    this._sceneLoading = true;\r\n                    cc.director.loadScene('game-over-scene');\r\n                }\r\n            } else {\r\n                //enemy removed\r\n                if (!this._enemyRemoving) {\r\n                    this._enemyRemoving = true;\r\n                    window.enemyNum--;\r\n                    this.node.removeFromParent();\r\n                }\r\n            }\r\n        } else {\r\n            this._hpLabel.string = this.hp;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n"]}