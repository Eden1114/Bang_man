{"version":3,"sources":["../../../../assets/script/assets/script/JoystickBG.js"],"names":["Common","require","cc","Class","extends","Component","properties","dot","default","type","Node","displayName","_joyCom","_playerNode","_angle","_radian","_speed","_speed1","_speed2","_opacity","onLoad","node","parent","getComponent","sprite","touchType","TouchType","DEFAULT","_initTouchEvent","self","on","EventType","TOUCH_START","_touchStartEvent","TOUCH_MOVE","_touchMoveEvent","TOUCH_END","_touchEndEvent","TOUCH_CANCEL","update","dt","directionType","DirectionType","ALL","_allDirectionsMove","player","move_control","dx","Math","cos","PI","dy","sin","_getDistance","pos1","pos2","sqrt","pow","x","y","_getRadian","point","_getAngle","pos","getPosition","atan2","_setSpeed","distance","_radius","event","touchPos","convertToNodeSpaceAR","getLocation","p","radius","width","_stickPos","posX","posY","setPosition"],"mappings":";;;;;;AAAA,IAAIA,SAASC,QAAQ,gBAAR,CAAb;;AAEAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,aAAK;AACDC,qBAAS,IADR;AAEDC,kBAAMP,GAAGQ,IAFR;AAGDC,yBAAa;AAHZ,SADG;;AAORC,iBAAS;AACLJ,qBAAS,IADJ;AAELG,yBAAa;AAFR,SAPD;;AAYRE,qBAAa;AACTL,qBAAS,IADA;AAETG,yBAAa;AAFJ,SAZL;;AAiBRG,gBAAQ;AACJN,qBAAS,IADL;AAEJG,yBAAa;AAFT,SAjBA;;AAsBRI,iBAAS;AACLP,qBAAS,IADJ;AAELG,yBAAa;AAFR,SAtBD;;AA4BRK,gBAAQ,CA5BA,EA4BY;AACpBC,iBAAS,CA7BD,EA6BY;AACpBC,iBAAS,CA9BD,EA8BY;AACpBC,kBAAU,GA/BF,CA+Bc;AA/Bd,KAHP;;AAsCLC,YAAQ,kBAAY;;AAEhB;AACA,aAAKR,OAAL,GAAe,KAAKS,IAAL,CAAUC,MAAV,CAAiBC,YAAjB,CAA8B,MAA9B,CAAf;;AAEA;AACA,aAAKV,WAAL,GAAmB,KAAKD,OAAL,CAAaY,MAAhC;;AAEA,YAAI,KAAKZ,OAAL,CAAaa,SAAb,IAA0BzB,OAAO0B,SAAP,CAAiBC,OAA/C,EAAwD;AACpD;AACA,iBAAKC,eAAL;AACH;AACJ,KAlDI;;AAqDL;AACAA,qBAAiB,2BAAY;AACzB,YAAIC,OAAO,IAAX;;AAEAA,aAAKR,IAAL,CAAUS,EAAV,CAAa5B,GAAGQ,IAAH,CAAQqB,SAAR,CAAkBC,WAA/B,EAA4C,KAAKC,gBAAjD,EAAmEJ,IAAnE;AACAA,aAAKR,IAAL,CAAUS,EAAV,CAAa5B,GAAGQ,IAAH,CAAQqB,SAAR,CAAkBG,UAA/B,EAA4C,KAAKC,eAAjD,EAAmEN,IAAnE;;AAEA;AACAA,aAAKR,IAAL,CAAUS,EAAV,CAAa5B,GAAGQ,IAAH,CAAQqB,SAAR,CAAkBK,SAA/B,EAA0C,KAAKC,cAA/C,EAA+DR,IAA/D;AACAA,aAAKR,IAAL,CAAUS,EAAV,CAAa5B,GAAGQ,IAAH,CAAQqB,SAAR,CAAkBO,YAA/B,EAA6C,KAAKD,cAAlD,EAAkER,IAAlE;AAEH,KAhEI;;AAkEL;AACAU,YAAQ,gBAAUC,EAAV,EAAc;AAClB,gBAAQ,KAAK5B,OAAL,CAAa6B,aAArB;AACI,iBAAKzC,OAAO0C,aAAP,CAAqBC,GAA1B;AACI,qBAAKC,kBAAL;AACA;AACJ;AACI;AALR;AAOH,KA3EI;;AA6EL;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AACAA,wBAAoB,8BAAY;AAC5B,YAAIC,SAAS,KAAKhC,WAAlB;AACA,YAAIiC,eAAeD,OAAOtB,YAAP,CAAoB,cAApB,CAAnB;;AAEA,YAAIwB,KAAKC,KAAKC,GAAL,CAAS,KAAKnC,MAAL,IAAekC,KAAKE,EAAL,GAAU,GAAzB,CAAT,IAA0C,KAAKlC,MAAxD;AACA,YAAImC,KAAKH,KAAKI,GAAL,CAAS,KAAKtC,MAAL,IAAekC,KAAKE,EAAL,GAAU,GAAzB,CAAT,IAA0C,KAAKlC,MAAxD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACH,KAvII;;AAyIL;AACAqC,kBAAc,sBAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AAChC,eAAOP,KAAKQ,IAAL,CAAUR,KAAKS,GAAL,CAASH,KAAKI,CAAL,GAASH,KAAKG,CAAvB,EAA0B,CAA1B,IACbV,KAAKS,GAAL,CAASH,KAAKK,CAAL,GAASJ,KAAKI,CAAvB,EAA0B,CAA1B,CADG,CAAP;AAEH,KA7II;;AA+IL;;;AAGA;AACAC,gBAAY,oBAAUC,KAAV,EAAiB;AACzB,aAAK9C,OAAL,GAAeiC,KAAKE,EAAL,GAAU,GAAV,GAAgB,KAAKY,SAAL,CAAeD,KAAf,CAA/B;AACA,eAAO,KAAK9C,OAAZ;AACH,KAtJI;;AAwJL;AACA+C,eAAW,mBAAUD,KAAV,EAAiB;;AAExB,YAAIE,MAAM,KAAK1C,IAAL,CAAU2C,WAAV,EAAV;AACA,aAAKlD,MAAL,GAAckC,KAAKiB,KAAL,CAAWJ,MAAMF,CAAN,GAAUI,IAAIJ,CAAzB,EAA4BE,MAAMH,CAAN,GAAUK,IAAIL,CAA1C,KAAgD,MAAMV,KAAKE,EAA3D,CAAd;AACA,eAAO,KAAKpC,MAAZ;AACH,KA9JI;;AAgKL;AACAoD,eAAW,mBAAUL,KAAV,EAAiB;AACxB;AACA,YAAIM,WAAW,KAAKd,YAAL,CAAkBQ,KAAlB,EAAyB,KAAKxC,IAAL,CAAU2C,WAAV,EAAzB,CAAf;;AAEA;AACA,YAAIG,WAAW,KAAKC,OAApB,EAA6B;AACzB,iBAAKpD,MAAL,GAAc,KAAKC,OAAnB;AACH,SAFD,MAGK;AACD,iBAAKD,MAAL,GAAc,KAAKE,OAAnB;AACH;AACJ,KA5KI;;AA8KL;AACAe,sBAAkB,0BAAUoC,KAAV,EAAiB;AAC/B;AACA,YAAIC,WAAW,KAAKjD,IAAL,CAAUkD,oBAAV,CAA+BF,MAAMG,WAAN,EAA/B,CAAf;AACA;AACA,YAAIL,WAAW,KAAKd,YAAL,CAAkBiB,QAAlB,EAA4BpE,GAAGuE,CAAH,CAAK,CAAL,EAAQ,CAAR,CAA5B,CAAf;AACA;AACA,YAAIC,SAAS,KAAKrD,IAAL,CAAUsD,KAAV,GAAkB,CAA/B;AACA;AACA,aAAKC,SAAL,GAAiBN,QAAjB;AACA,YAAIO,OAAO,KAAKxD,IAAL,CAAU2C,WAAV,GAAwBN,CAAxB,GAA4BY,SAASZ,CAAhD;AACA,YAAIoB,OAAO,KAAKzD,IAAL,CAAU2C,WAAV,GAAwBL,CAAxB,GAA4BW,SAASX,CAAhD;AACA;AACA,YAAIe,SAASP,QAAb,EAAuB;AACnB,iBAAK5D,GAAL,CAASwE,WAAT,CAAqB7E,GAAGuE,CAAH,CAAKI,IAAL,EAAWC,IAAX,CAArB;AACA,mBAAO,IAAP;AACH;AACD,eAAO,KAAP;AACH,KAhMI;;AAkML;AACA3C,qBAAiB,yBAAUkC,KAAV,EAAiB;AAC9B,YAAIC,WAAW,KAAKjD,IAAL,CAAUkD,oBAAV,CAA+BF,MAAMG,WAAN,EAA/B,CAAf;AACA,YAAIL,WAAW,KAAKd,YAAL,CAAkBiB,QAAlB,EAA4BpE,GAAGuE,CAAH,CAAK,CAAL,EAAQ,CAAR,CAA5B,CAAf;AACA,YAAIC,SAAS,KAAKrD,IAAL,CAAUsD,KAAV,GAAkB,CAA/B;AACA;AACA,YAAIE,OAAO,KAAKxD,IAAL,CAAU2C,WAAV,GAAwBN,CAAxB,GAA4BY,SAASZ,CAAhD;AACA,YAAIoB,OAAO,KAAKzD,IAAL,CAAU2C,WAAV,GAAwBL,CAAxB,GAA4BW,SAASX,CAAhD;AACA,YAAIe,SAASP,QAAb,EAAuB;AACnB,iBAAK5D,GAAL,CAASwE,WAAT,CAAqB7E,GAAGuE,CAAH,CAAKI,IAAL,EAAWC,IAAX,CAArB;AACH,SAFD,MAGK;AACD;AACA,gBAAIpB,IAAI,KAAKrC,IAAL,CAAU2C,WAAV,GAAwBN,CAAxB,GAA4BV,KAAKC,GAAL,CAAS,KAAKW,UAAL,CAAgB1D,GAAGuE,CAAH,CAAKI,IAAL,EAAWC,IAAX,CAAhB,CAAT,IAA8CJ,MAAlF;AACA,gBAAIf,IAAI,KAAKtC,IAAL,CAAU2C,WAAV,GAAwBL,CAAxB,GAA4BX,KAAKI,GAAL,CAAS,KAAKQ,UAAL,CAAgB1D,GAAGuE,CAAH,CAAKI,IAAL,EAAWC,IAAX,CAAhB,CAAT,IAA8CJ,MAAlF;AACA,iBAAKnE,GAAL,CAASwE,WAAT,CAAqB7E,GAAGuE,CAAH,CAAKf,CAAL,EAAQC,CAAR,CAArB;AACH;AACD;AACA,aAAKG,SAAL,CAAe5D,GAAGuE,CAAH,CAAKI,IAAL,EAAWC,IAAX,CAAf;AACA;AACA,aAAKZ,SAAL,CAAehE,GAAGuE,CAAH,CAAKI,IAAL,EAAWC,IAAX,CAAf;AAEH,KAxNI;;AA0NL;AACAzC,oBAAgB,0BAAY;AACxB,aAAK9B,GAAL,CAASwE,WAAT,CAAqB,KAAK1D,IAAL,CAAU2C,WAAV,EAArB;AACA,aAAKhD,MAAL,GAAc,CAAd;AACH;AA9NI,CAAT","file":"JoystickBG.js","sourceRoot":"../../../../assets/script","sourcesContent":["var Common = require('JoystickCommon');\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        dot: {\n            default: null,\n            type: cc.Node,\n            displayName: '摇杆节点',\n        },\n\n        _joyCom: {\n            default: null,\n            displayName: 'joy Node',\n        },\n\n        _playerNode: {\n            default: null,\n            displayName: '被操作的目标Node',\n        },\n\n        _angle: {\n            default: null,\n            displayName: '当前触摸的角度',\n        },\n\n        _radian: {\n            default: null,\n            displayName: '弧度',\n        },\n\n\n        _speed: 0,          //实际速度\n        _speed1: 3,         //一段速度\n        _speed2: 5,         //二段速度\n        _opacity: 128,        //透明度\n    },\n\n\n    onLoad: function () {\n\n        // joy下的Game组件\n        this._joyCom = this.node.parent.getComponent('Game');\n        \n        // game组件下的player节点\n        this._playerNode = this._joyCom.sprite;\n\n        if (this._joyCom.touchType == Common.TouchType.DEFAULT) {\n            //对圆圈的触摸添加监听事件\n            this._initTouchEvent();\n        }\n    },\n\n\n    //对圆圈的触摸监听\n    _initTouchEvent: function () {\n        let self = this;\n\n        self.node.on(cc.Node.EventType.TOUCH_START, this._touchStartEvent, self);\n        self.node.on(cc.Node.EventType.TOUCH_MOVE , this._touchMoveEvent , self);\n\n        // 触摸在圆圈内离开或在圆圈外离开后，摇杆归位，player速度为0\n        self.node.on(cc.Node.EventType.TOUCH_END, this._touchEndEvent, self);\n        self.node.on(cc.Node.EventType.TOUCH_CANCEL, this._touchEndEvent, self);\n\n    },\n\n    //更新移动目标\n    update: function (dt) {\n        switch (this._joyCom.directionType) {\n            case Common.DirectionType.ALL:\n                this._allDirectionsMove();\n                break;\n            default:\n                break;\n        }\n    },\n\n    /**\n     * onKeyDown: function (e) {\n        //在按下的时候设置方向标志位\n        switch (e.keyCode) {\n            case cc.KEY.up: { this._up = true; break }\n            case cc.KEY.down: { this._down = true; break }\n            case cc.KEY.left: { this._left = true; this.node.scaleX = -1; this.node.children[0].scaleX = -1; break }\n            case cc.KEY.right: { this._right = true; this.node.scaleX = 1; this.node.children[0].scaleX = 1; break }\n        }\n    },\n\n    onKeyUp: function (e) {\n        //在弹起的时候解除方向标志位\n        switch (e.keyCode) {\n            case cc.KEY.up: { this._up = false; break }\n            case cc.KEY.down: { this._down = false; break }\n            case cc.KEY.left: { this._left = false; break }\n            case cc.KEY.right: { this._right = false; break }\n        }\n    },\n     * \n     * \n     */\n\n    \n    //全方向移动\n    _allDirectionsMove: function () {\n        let player = this._playerNode;\n        let move_control = player.getComponent('move-control');\n\n        let dx = Math.cos(this._angle * (Math.PI / 180)) * this._speed;\n        let dy = Math.sin(this._angle * (Math.PI / 180)) * this._speed;\n        \n        // move_control.onAllDirectionMove(dx, dy);\n\n        // console.log(this);\n        // console.log(this._playerNode);\n        //DEBUG\n        // let manager = cc.director.getCollisionManager();\n        // manager.enabled = true;\n        // if (!this.realPlayer) {\n        //     //计算玩家位置并不断追逐\n        //     let targetVector = cc.pSub(this._player.position, this.node.position);\n        //     let moveStep = cc.pMult(cc.pNormalize(targetVector), this.moveSpeed);\n        //     if (moveStep.x > 0 && !!this._rightBlock) { moveStep.x = 0; }\n        //     if (moveStep.x < 0 && !!this._leftBlock) { moveStep.x = 0; }\n        //     if (moveStep.y > 0 && !!this._upBlock) { moveStep.y = 0; }\n        //     if (moveStep.y < 0 && !!this._downBlock) { moveStep.y = 0; }\n        //     if (moveStep.x > 0) { this.node.scaleX = 1; this.node.children[0].scaleX = 1; }\n        //     if (moveStep.x < 0) { this.node.scaleX = -1; this.node.children[0].scaleX = -1; }\n        //     this.node.position = cc.pAdd(this.node.position, moveStep);\n        // } else {\n\n        //     if (this._left && !this._leftBlock) { this.node.x -= this.moveSpeed }\n        //     if (this._right && !this._rightBlock) { this.node.x += this.moveSpeed }\n        //     if (this._up && !this._upBlock) { this.node.y += this.moveSpeed }\n        //     if (this._down && !this._downBlock) { this.node.y -= this.moveSpeed }\n        // }\n    },\n\n    //计算两点间的距离并返回\n    _getDistance: function (pos1, pos2) {\n        return Math.sqrt(Math.pow(pos1.x - pos2.x, 2) +\n            Math.pow(pos1.y - pos2.y, 2));\n    },\n\n    /*角度/弧度转换\n    角度 = 弧度 * 180 / Math.PI\n    弧度 = 角度 * Math.PI / 180*/\n    //计算弧度并返回\n    _getRadian: function (point) {\n        this._radian = Math.PI / 180 * this._getAngle(point);\n        return this._radian;\n    },\n\n    //计算角度并返回\n    _getAngle: function (point) {\n\n        var pos = this.node.getPosition();\n        this._angle = Math.atan2(point.y - pos.y, point.x - pos.x) * (180 / Math.PI);\n        return this._angle;\n    },\n\n    //设置实际速度\n    _setSpeed: function (point) {\n        //触摸点和遥控杆中心的距离\n        var distance = this._getDistance(point, this.node.getPosition());\n\n        //如果半径小于radius，为一段速度，否则为二段速度\n        if (distance < this._radius) {\n            this._speed = this._speed1;\n        }\n        else {\n            this._speed = this._speed2;\n        }\n    },\n\n    //开始触摸到屏幕\n    _touchStartEvent: function (event) {\n        // 获取触摸位置的世界坐标转换成圆圈的相对坐标（以圆圈的锚点为基准）\n        var touchPos = this.node.convertToNodeSpaceAR(event.getLocation());\n        //触摸点与圆圈中心的距离\n        var distance = this._getDistance(touchPos, cc.p(0, 0));\n        //圆圈半径\n        var radius = this.node.width / 2;\n        // 记录摇杆位置，给touch move使用\n        this._stickPos = touchPos;\n        var posX = this.node.getPosition().x + touchPos.x;\n        var posY = this.node.getPosition().y + touchPos.y;\n        //手指在圆圈内触摸,控杆跟随触摸点\n        if (radius > distance) {\n            this.dot.setPosition(cc.p(posX, posY));\n            return true;\n        }\n        return false;\n    },\n\n    //跟随移动\n    _touchMoveEvent: function (event) {\n        var touchPos = this.node.convertToNodeSpaceAR(event.getLocation());\n        var distance = this._getDistance(touchPos, cc.p(0, 0));\n        var radius = this.node.width / 2;\n        // 由于摇杆的postion是以父节点为锚点，所以定位要加上ring和dot当前的位置(stickX,stickY)\n        var posX = this.node.getPosition().x + touchPos.x;\n        var posY = this.node.getPosition().y + touchPos.y;\n        if (radius > distance) {\n            this.dot.setPosition(cc.p(posX, posY));\n        }\n        else {\n            //控杆永远保持在圈内，并在圈内跟随触摸更新角度\n            var x = this.node.getPosition().x + Math.cos(this._getRadian(cc.p(posX, posY))) * radius;\n            var y = this.node.getPosition().y + Math.sin(this._getRadian(cc.p(posX, posY))) * radius;\n            this.dot.setPosition(cc.p(x, y));\n        }\n        //更新角度\n        this._getAngle(cc.p(posX, posY));\n        //设置实际速度\n        this._setSpeed(cc.p(posX, posY));\n\n    },\n\n    //触摸结束\n    _touchEndEvent: function () {\n        this.dot.setPosition(this.node.getPosition());\n        this._speed = 0;\n    },\n});\n"]}